name: release

on:
  workflow_dispatch:
    inputs:
      chunk-size:
        description: Specify the chunk size in bytes. If not used, the current default is 1048576.
        type: number
        required: false
      release-nat-detection:
        description: Release nat-detection binary
        type: boolean
        required: false
        default: true
      release-node-launchpad:
        description: Release node-launchpad binary
        type: boolean
        required: false
        default: true
      release-ant:
        description: Release ant binary
        type: boolean
        required: false
        default: true
      release-antnode:
        description: Release antnode binary
        type: boolean
        required: false
        default: true
      release-antctl:
        description: Release antctl binary
        type: boolean
        required: false
        default: true
      release-antctld:
        description: Release antctld binary
        type: boolean
        required: false
        default: true
      release-antnode-rpc-client:
        description: Release antnode_rpc_client binary
        type: boolean
        required: false
        default: true
      release-evm-testnet:
        description: Release evm-testnet binary
        type: boolean
        required: false
        default: true

env:
  WORKFLOW_URL: https://github.com/maidsafe/autonomi/actions/runs

jobs:
  build:
    if: ${{
        github.repository_owner == 'maidsafe' &&
        (github.ref == 'refs/heads/stable' || startsWith(github.ref, 'refs/heads/rc'))
      }}
    name: build
    environment: ${{ github.ref == 'refs/heads/stable' && 'stable' || 'release-candidate' }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
          - os: ubuntu-latest
            target: arm-unknown-linux-musleabi
          - os: ubuntu-latest
            target: armv7-unknown-linux-musleabihf
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@stable
      - uses: cargo-bins/cargo-binstall@main
      - shell: bash
        run: cargo binstall --no-confirm just

      - name: Set chunk size if applicable
        if: ${{ inputs.chunk-size != '' }}
        shell: bash
        run: |
          echo "MAX_CHUNK_SIZE=${{ inputs.chunk-size }}" >> $GITHUB_ENV

      - name: build release artifacts
        shell: bash
        run: |
          export RELEASE_NAT_DETECTION="${{ inputs.release-nat-detection }}"
          export RELEASE_NODE_LAUNCHPAD="${{ inputs.release-node-launchpad }}"
          export RELEASE_ANT="${{ inputs.release-ant }}"
          export RELEASE_ANTNODE="${{ inputs.release-antnode }}"
          export RELEASE_ANTCTL="${{ inputs.release-antctl }}"
          export RELEASE_ANTCTLD="${{ inputs.release-antctld }}"
          export RELEASE_ANTNODE_RPC_CLIENT="${{ inputs.release-antnode-rpc-client }}"
          export RELEASE_EVM_TESTNET="${{ inputs.release-evm-testnet }}"

          just build-release-artifacts "${{ matrix.target }}"

      - name: Download previous binaries from S3
        shell: bash
        run: |
          arch="${{ matrix.target }}"

          get_version() {
            local crate_dir=$1
            grep "^version" < "$crate_dir/Cargo.toml" | head -n 1 | awk '{ print $3 }' | sed 's/"//g'
          }

          download_from_s3() {
            local bin_name=$1
            local crate_dir=$2
            local s3_bucket=$3

            version=$(get_version "$crate_dir")

            if [[ "$arch" == *"windows"* ]]; then
              archive_name="${bin_name}-${version}-${arch}.zip"
              binary_name="${bin_name}.exe"
            else
              archive_name="${bin_name}-${version}-${arch}.tar.gz"
              binary_name="${bin_name}"
            fi

            echo "Downloading ${archive_name} from S3..."
            if ! curl -f -L -o "${archive_name}" "https://${s3_bucket}.s3.eu-west-2.amazonaws.com/${archive_name}"; then
              echo "Failed to download ${archive_name}"
              return 1
            fi

            temp_dir=$(mktemp -d)
            if [[ "$arch" == *"windows"* ]]; then
              unzip -q "${archive_name}" -d "$temp_dir"
            else
              tar -xzf "${archive_name}" -C "$temp_dir"
            fi

            cp "$temp_dir/${binary_name}" "artifacts/${binary_name}"
            chmod +x "artifacts/${binary_name}"
            rm -rf "$temp_dir" "${archive_name}"

            echo "Downloaded ${bin_name} version ${version} from S3"
          }

          if [[ "${{ inputs.release-nat-detection }}" != "true" ]]; then
            download_from_s3 "nat-detection" "nat-detection" "nat-detection"
          fi

          if [[ "${{ inputs.release-node-launchpad }}" != "true" ]]; then
            download_from_s3 "node-launchpad" "node-launchpad" "node-launchpad"
          fi

          if [[ "${{ inputs.release-ant }}" != "true" ]]; then
            download_from_s3 "ant" "ant-cli" "autonomi-cli"
          fi

          if [[ "${{ inputs.release-antnode }}" != "true" ]]; then
            download_from_s3 "antnode" "ant-node" "antnode"
          fi

          if [[ "${{ inputs.release-antctl }}" != "true" ]]; then
            download_from_s3 "antctl" "ant-node-manager" "antctl"
          fi

          if [[ "${{ inputs.release-antctld }}" != "true" ]]; then
            download_from_s3 "antctld" "ant-node-manager" "antctl"
          fi

          if [[ "${{ inputs.release-antnode-rpc-client }}" != "true" ]]; then
            download_from_s3 "antnode_rpc_client" "ant-node-rpc-client" "antnode-rpc-client"
          fi

          if [[ "${{ inputs.release-evm-testnet }}" != "true" ]]; then
            download_from_s3 "evm-testnet" "evm-testnet" "evm-testnet"
          fi

      - uses: actions/upload-artifact@main
        with:
          name: autonomi-${{ matrix.target }}
          path: |
            artifacts
            !artifacts/.cargo-lock

      - name: post notification to slack on failure
        if: ${{ failure() }}
        uses: bryannice/gitactions-slack-notification@2.0.0
        env:
          SLACK_INCOMING_WEBHOOK: ${{ secrets.SLACK_GH_ACTIONS_WEBHOOK_URL }}
          SLACK_MESSAGE: "Please check the logs for the run at ${{ env.WORKFLOW_URL }}/${{ github.run_id }}"
          SLACK_TITLE: "Release Failed"

  sign-windows-binaries:
    if: ${{
        github.repository_owner == 'maidsafe' &&
        (github.ref == 'refs/heads/stable' || startsWith(github.ref, 'refs/heads/rc'))
      }}
    name: sign windows binaries
    runs-on: windows-latest
    needs: [ build ]
    environment: ${{ github.ref == 'refs/heads/stable' && 'stable' || 'release-candidate' }}
    env:
      RELEASE_ANT: ${{ inputs.release-ant }}
      RELEASE_ANTNODE: ${{ inputs.release-antnode }}
      RELEASE_ANTCTL: ${{ inputs.release-antctl }}
      RELEASE_ANTCTLD: ${{ inputs.release-antctld }}
      RELEASE_ANTNODE_RPC_CLIENT: ${{ inputs.release-antnode-rpc-client }}
      RELEASE_EVM_TESTNET: ${{ inputs.release-evm-testnet }}
      RELEASE_NAT_DETECTION: ${{ inputs.release-nat-detection }}
      RELEASE_NODE_LAUNCHPAD: ${{ inputs.release-node-launchpad }}
      SM_HOST: ${{ secrets.SM_HOST }}
      SM_API_KEY: ${{ secrets.SM_API_KEY }}
      SM_CLIENT_CERT_PASSWORD: ${{ secrets.SM_CLIENT_CERT_PASSWORD }}
      SM_KEYPAIR_ALIAS: ${{ secrets.SM_KEYPAIR_ALIAS }}
      SM_LOG_LEVEL: trace
      SM_LOG_FILE: ${{ github.workspace }}\smctl-signing.log
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@master
        with:
          name: autonomi-x86_64-pc-windows-msvc
          path: artifacts/x86_64-pc-windows-msvc/release

      - name: Create client certificate file from base64
        id: prepare_cert
        shell: pwsh
        run: |
          $raw = @'
          ${{ secrets.SM_CLIENT_CERT_B64 }}
          '@

          $clean = ($raw -replace '\s','')

          if ([string]::IsNullOrWhiteSpace($clean)) {
            Write-Error "SM_CLIENT_CERT_B64 is empty after normalization."
            exit 1
          }

          try {
            $certBytes = [Convert]::FromBase64String($clean)
          } catch {
            Write-Error "SM_CLIENT_CERT_B64 is not valid Base64. Ensure you pasted a base64-encoded P12."
            exit 1
          }

          $certPath = Join-Path $env:RUNNER_TEMP "Certificate.p12"
          [System.IO.File]::WriteAllBytes($certPath, $certBytes)

          if (-not (Test-Path $certPath)) {
            Write-Error "Failed to create certificate file at: $certPath"
            exit 1
          }

          "SM_CLIENT_CERT_FILE=$certPath" | Out-File -FilePath $env:GITHUB_ENV -Append

          "cert_path=$certPath" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "sm_client_cert_b64=$clean" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Setup DigiCert Software Trust Manager tools (installs smctl)
        uses: digicert/ssm-code-signing@v1.1.1
        with:
          sm_host: ${{ secrets.SM_HOST }}
          sm_api_key: ${{ secrets.SM_API_KEY }}
          sm_client_cert_b64: ${{ steps.prepare_cert.outputs.sm_client_cert_b64 }}
          sm_client_cert_password: ${{ secrets.SM_CLIENT_CERT_PASSWORD }}

      - name: Verify smctl installation and certificate access
        shell: pwsh
        run: |
          smctl -v
          smctl healthcheck
          smctl keypair ls

      - name: Sign Windows executables
        shell: pwsh
        run: |
          $artifactsPath = "artifacts\x86_64-pc-windows-msvc\release"
          $allFiles = Get-ChildItem $artifactsPath -Filter *.exe -Recurse

          # Define which binaries should be signed based on build flags
          $binaryMap = @{
            "nat-detection.exe" = $env:RELEASE_NAT_DETECTION
            "node-launchpad.exe" = $env:RELEASE_NODE_LAUNCHPAD
            "ant.exe" = $env:RELEASE_ANT
            "antnode.exe" = $env:RELEASE_ANTNODE
            "antctl.exe" = $env:RELEASE_ANTCTL
            "antctld.exe" = $env:RELEASE_ANTCTLD
            "antnode_rpc_client.exe" = $env:RELEASE_ANTNODE_RPC_CLIENT
            "evm-testnet.exe" = $env:RELEASE_EVM_TESTNET
          }

          # Filter files to only those that were built in this run
          $files = $allFiles | Where-Object {
            $fileName = $_.Name
            $shouldBuild = $binaryMap[$fileName]
            if ($shouldBuild -eq "true") {
              return $true
            }
            Write-Host "Skipping $fileName (not built in this run)"
            return $false
          }

          if ($files.Count -eq 0) {
            Write-Host "No executables to sign (none were built in this run)"
            exit 0
          }

          Write-Host "Found $($files.Count) executable(s) to sign:"
          $files | ForEach-Object { Write-Host "  - $($_.Name)" }
          Write-Host ""

          $smHostValue = $env:SM_HOST
          $smApiKey = $env:SM_API_KEY
          $smClientCertFile = $env:SM_CLIENT_CERT_FILE
          $smClientCertPassword = $env:SM_CLIENT_CERT_PASSWORD
          $smKeypairAlias = $env:SM_KEYPAIR_ALIAS
          $smLogLevel = $env:SM_LOG_LEVEL
          $smLogFile = $env:SM_LOG_FILE

          $jobs = @()
          $maxParallel = 3

          foreach ($f in $files) {
            # Wait if we've hit the parallel limit
            while ((Get-Job -State Running).Count -ge $maxParallel) {
              Start-Sleep -Milliseconds 500
            }

            Write-Host "Starting signing job for: $($f.Name)"
            $job = Start-Job -ScriptBlock {
              param($filePath, $alias, $smHostValue, $apiKey, $certFile, $certPassword, $logLevel, $logFile)

              $env:SM_HOST = $smHostValue
              $env:SM_API_KEY = $apiKey
              $env:SM_CLIENT_CERT_FILE = $certFile
              $env:SM_CLIENT_CERT_PASSWORD = $certPassword
              $env:SM_KEYPAIR_ALIAS = $alias
              $env:SM_LOG_LEVEL = $logLevel
              $env:SM_LOG_FILE = $logFile

              $result = & smctl sign --keypair-alias "$alias" --input "$filePath" 2>&1
              if ($LASTEXITCODE -ne 0) {
                throw "Signing failed for $filePath : $result"
              }
              return "Successfully signed: $filePath"
            } -ArgumentList $f.FullName, $smKeypairAlias, $smHostValue, $smApiKey, $smClientCertFile, $smClientCertPassword, $smLogLevel, $smLogFile

            $jobs += $job
          }

          $failed = @()
          foreach ($job in $jobs) {
            $result = Receive-Job -Job $job -Wait
            if ($job.State -eq 'Failed') {
              $failed += $job.ChildJobs[0].JobStateInfo.Reason.Message
            } else {
              Write-Host $result
            }
            Remove-Job -Job $job
          }

          if ($failed.Count -gt 0) {
            Write-Error ("Signing failed for the following files:`n" + ($failed -join "`n"))
            exit 1
          }

          Write-Host ""
          Write-Host "All files signed successfully!"

      - name: Verify signatures (Authenticode)
        shell: pwsh
        run: |
          $artifactsPath = "artifacts\x86_64-pc-windows-msvc\release"
          $allFiles = Get-ChildItem $artifactsPath -Filter *.exe -Recurse

          # Define which binaries should be verified based on build flags
          $binaryMap = @{
            "nat-detection.exe" = $env:RELEASE_NAT_DETECTION
            "node-launchpad.exe" = $env:RELEASE_NODE_LAUNCHPAD
            "ant.exe" = $env:RELEASE_ANT
            "antnode.exe" = $env:RELEASE_ANTNODE
            "antctl.exe" = $env:RELEASE_ANTCTL
            "antctld.exe" = $env:RELEASE_ANTCTLD
            "antnode_rpc_client.exe" = $env:RELEASE_ANTNODE_RPC_CLIENT
            "evm-testnet.exe" = $env:RELEASE_EVM_TESTNET
          }

          # Filter files to only those that were built and signed in this run
          $files = $allFiles | Where-Object {
            $fileName = $_.Name
            $shouldBuild = $binaryMap[$fileName]
            return $shouldBuild -eq "true"
          }

          if ($files.Count -eq 0) {
            Write-Host "No executables to verify (none were built in this run)"
            exit 0
          }

          $bad = @()
          $verified = 0

          foreach ($f in $files) {
            $sig = Get-AuthenticodeSignature $f.FullName
            "{0} -> {1}" -f $f.Name, $sig.Status | Write-Host

            if ($sig.Status -eq "Valid") {
              $verified++
              Write-Host "  Signer: $($sig.SignerCertificate.Subject)"
              Write-Host "  Issuer: $($sig.SignerCertificate.Issuer)"
            } else {
              $bad += $f.Name
            }
          }

          Write-Host "`nVerification Summary: $verified/$($files.Count) files verified successfully"

          if ($bad.Count -gt 0) {
            Write-Error ("Signature validation failed for:`n" + ($bad -join "`n"))
            exit 1
          }

      - uses: actions/upload-artifact@v4
        with:
          name: autonomi-x86_64-pc-windows-msvc-signed
          path: artifacts/x86_64-pc-windows-msvc/release

      - name: Upload signing logs (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: release-signing-logs
          path: ${{ github.workspace }}\smctl-signing.log
          if-no-files-found: ignore

      - name: post notification to slack on failure
        if: ${{ failure() }}
        uses: bryannice/gitactions-slack-notification@2.0.0
        env:
          SLACK_INCOMING_WEBHOOK: ${{ secrets.SLACK_GH_ACTIONS_WEBHOOK_URL }}
          SLACK_MESSAGE: "Please check the logs for the run at ${{ env.WORKFLOW_URL }}/${{ github.run_id }}"
          SLACK_TITLE: "Release Signing Failed"

  s3-release:
    if: ${{
        github.repository_owner == 'maidsafe' &&
        (github.ref == 'refs/heads/stable' || startsWith(github.ref, 'refs/heads/rc'))
      }}
    name: s3 release
    runs-on: ubuntu-latest
    needs: [build, sign-windows-binaries]
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.S3_DEPLOY_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_DEPLOY_AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: eu-west-2
    steps:
      - uses: actions/checkout@v5
      - uses: actions/download-artifact@master
        with:
          name: autonomi-x86_64-pc-windows-msvc
          path: artifacts/x86_64-pc-windows-msvc/release
      - uses: actions/download-artifact@master
        with:
          name: autonomi-x86_64-pc-windows-msvc-signed
          path: artifacts/x86_64-pc-windows-msvc-signed/release
      - uses: actions/download-artifact@master
        with:
          name: autonomi-x86_64-unknown-linux-musl
          path: artifacts/x86_64-unknown-linux-musl/release
      - uses: actions/download-artifact@master
        with:
          name: autonomi-x86_64-apple-darwin
          path: artifacts/x86_64-apple-darwin/release
      - uses: actions/download-artifact@master
        with:
          name: autonomi-aarch64-apple-darwin
          path: artifacts/aarch64-apple-darwin/release
      - uses: actions/download-artifact@master
        with:
          name: autonomi-arm-unknown-linux-musleabi
          path: artifacts/arm-unknown-linux-musleabi/release
      - uses: actions/download-artifact@master
        with:
          name: autonomi-armv7-unknown-linux-musleabihf
          path: artifacts/armv7-unknown-linux-musleabihf/release
      - uses: actions/download-artifact@master
        with:
          name: autonomi-aarch64-unknown-linux-musl
          path: artifacts/aarch64-unknown-linux-musl/release

      - uses: cargo-bins/cargo-binstall@main
      - name: install just
        shell: bash
        run: cargo binstall --no-confirm just

      - name: replace unsigned Windows binaries with signed ones
        shell: bash
        run: |
          # Replace only the binaries that were built and signed in this run
          binaries=(
            "nat-detection:${{ inputs.release-nat-detection }}"
            "node-launchpad:${{ inputs.release-node-launchpad }}"
            "ant:${{ inputs.release-ant }}"
            "antnode:${{ inputs.release-antnode }}"
            "antctl:${{ inputs.release-antctl }}"
            "antctld:${{ inputs.release-antctld }}"
            "antnode_rpc_client:${{ inputs.release-antnode-rpc-client }}"
            "evm-testnet:${{ inputs.release-evm-testnet }}"
          )

          for entry in "${binaries[@]}"; do
            binary="${entry%%:*}"
            should_build="${entry##*:}"

            if [[ "$should_build" == "true" ]]; then
              echo "Replacing ${binary}.exe with signed version"
              if [[ -f "artifacts/x86_64-pc-windows-msvc-signed/release/${binary}.exe" ]]; then
                cp "artifacts/x86_64-pc-windows-msvc-signed/release/${binary}.exe" \
                   "artifacts/x86_64-pc-windows-msvc/release/${binary}.exe"
              else
                echo "Signed binary ${binary}.exe not found"
                exit 1
              fi
            else
              echo "Skipping ${binary}.exe (not built in this run)"
            fi
          done

      - name: upload binaries to S3
        shell: bash
        run: |
          # Package versioned assets as tar.gz and zip archives, and upload them to S3.
          #
          # This is done before publishing because the node manager relies on these binaries
          # existing after the new version of the `sn_node` crate is published. If these binaries
          # were uploaded after the publishing process, there could be a significant gap between the
          # new version of `sn_node` being published and the new binaries being available for
          # download. This could cause errors if node manager users ran the `upgrade` command,
          # because the process gets the latest version from `crates.io` then downloads the binaries
          # from S3, using that version number. Uploading the binaries to S3 before publishing
          # ensures that they will exist after the new crate has been published.
          just package-all-bins
          just upload-all-packaged-bins-to-s3

  github-release:
    if: ${{
        github.repository_owner == 'maidsafe' &&
        (github.ref == 'refs/heads/stable' || startsWith(github.ref, 'refs/heads/rc'))
      }}
    name: github release
    runs-on: ubuntu-latest
    needs: [build, sign-windows-binaries]
    steps:
      - uses: actions/checkout@v5
      - uses: actions/download-artifact@master
        with:
          name: autonomi-x86_64-pc-windows-msvc
          path: artifacts/x86_64-pc-windows-msvc/release
      - uses: actions/download-artifact@master
        with:
          name: autonomi-x86_64-pc-windows-msvc-signed
          path: artifacts/x86_64-pc-windows-msvc-signed/release
      - uses: actions/download-artifact@master
        with:
          name: autonomi-x86_64-unknown-linux-musl
          path: artifacts/x86_64-unknown-linux-musl/release
      - uses: actions/download-artifact@master
        with:
          name: autonomi-x86_64-apple-darwin
          path: artifacts/x86_64-apple-darwin/release
      - uses: actions/download-artifact@master
        with:
          name: autonomi-aarch64-apple-darwin
          path: artifacts/aarch64-apple-darwin/release
      - uses: actions/download-artifact@master
        with:
          name: autonomi-arm-unknown-linux-musleabi
          path: artifacts/arm-unknown-linux-musleabi/release
      - uses: actions/download-artifact@master
        with:
          name: autonomi-armv7-unknown-linux-musleabihf
          path: artifacts/armv7-unknown-linux-musleabihf/release
      - uses: actions/download-artifact@master
        with:
          name: autonomi-aarch64-unknown-linux-musl
          path: artifacts/aarch64-unknown-linux-musl/release

      - uses: cargo-bins/cargo-binstall@main
      - name: install just
        shell: bash
        run: cargo binstall --no-confirm just

      - name: replace unsigned Windows binaries with signed ones
        shell: bash
        run: |
          # Replace only the binaries that were built and signed in this run
          binaries=(
            "nat-detection:${{ inputs.release-nat-detection }}"
            "node-launchpad:${{ inputs.release-node-launchpad }}"
            "ant:${{ inputs.release-ant }}"
            "antnode:${{ inputs.release-antnode }}"
            "antctl:${{ inputs.release-antctl }}"
            "antctld:${{ inputs.release-antctld }}"
            "antnode_rpc_client:${{ inputs.release-antnode-rpc-client }}"
            "evm-testnet:${{ inputs.release-evm-testnet }}"
          )

          for entry in "${binaries[@]}"; do
            binary="${entry%%:*}"
            should_build="${entry##*:}"

            if [[ "$should_build" == "true" ]]; then
              echo "Replacing ${binary}.exe with signed version"
              if [[ -f "artifacts/x86_64-pc-windows-msvc-signed/release/${binary}.exe" ]]; then
                cp "artifacts/x86_64-pc-windows-msvc-signed/release/${binary}.exe" \
                   "artifacts/x86_64-pc-windows-msvc/release/${binary}.exe"
              else
                echo "Warning: Signed binary ${binary}.exe not found"
              fi
            else
              echo "Skipping ${binary}.exe (not built in this run)"
            fi
          done

      - name: set stable release prefix
        if: ${{ github.ref == 'refs/heads/stable' }}
        run: |
          echo "RELEASE_PREFIX=stable" >> $GITHUB_ENV

      - name: set rc release prefix
        if: ${{ startsWith(github.ref, 'refs/heads/rc') }}
        run: |
          echo "RELEASE_PREFIX=rc" >> $GITHUB_ENV

      - name: set package version
        shell: bash
        run: |
          release_year=$(grep 'release-year:' release-cycle-info | awk '{print $2}')
          release_month=$(grep 'release-month:' release-cycle-info | awk '{print $2}')
          release_cycle=$(grep 'release-cycle:' release-cycle-info | awk '{print $2}')
          release_cycle_counter=$(grep 'release-cycle-counter:' release-cycle-info | awk '{print $2}')
          version="$release_year.$release_month.$release_cycle.$release_cycle_counter"
          echo "PACKAGE_VERSION=$version" >> $GITHUB_ENV

      - name: package release artifacts
        shell: bash
        run: just package-all-architectures

      # For the next two steps, it seems to be necessary to set `GITHUB_TOKEN` on the step rather
      # than the job level.
      - name: create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.AUTONOMI_PAT }}
        with:
          tag_name: ${{ env.RELEASE_PREFIX }}-${{ env.PACKAGE_VERSION }}
          release_name: ${{ env.PACKAGE_VERSION }}
          draft: false
          prerelease: ${{ startsWith(github.ref, 'refs/heads/rc') && true || false }}

      - name: upload artifacts as assets
        env:
          GITHUB_TOKEN: ${{ secrets.AUTONOMI_PAT }}
        shell: bash
        run: |
          (
            cd packaged_architectures
            ls | xargs gh release upload ${{ env.RELEASE_PREFIX }}-${{ env.PACKAGE_VERSION }}
          )

      - name: post notification to slack on failure
        if: ${{ failure() }}
        uses: bryannice/gitactions-slack-notification@2.0.0
        env:
          SLACK_INCOMING_WEBHOOK: ${{ secrets.SLACK_GH_ACTIONS_WEBHOOK_URL }}
          SLACK_MESSAGE: "Please check the logs for the run at ${{ env.WORKFLOW_URL }}/${{ github.run_id }}"
          SLACK_TITLE: "Release Failed"

  # publish-crates:
  #   if: ${{ github.repository_owner == 'maidsafe' && github.ref == 'refs/heads/stable' }}
  #   needs: [ build, s3-release ]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v5
  #       with:
  #         fetch-depth: "0"
  #         token: ${{ secrets.AUTONOMI_PAT }}
  #     - uses: dtolnay/rust-toolchain@stable
  #
  #     # Required for the creation of tags
  #     - shell: bash
  #       run: |
  #         git config --local user.email "action@github.com"
  #         git config --local user.name "GitHub Action"
  #
  #     - uses: cargo-bins/cargo-binstall@main
  #     - shell: bash
  #       run: cargo binstall --no-confirm release-plz
  #
  #     - name: publish crates
  #       shell: bash
  #       run: |
  #         cargo login "${{ secrets.CRATES_IO_TOKEN }}"
  #         # The use of 'awk' suppresses the annoying instrumentation output that makes the log
  #         # difficult to read.
  #         release-plz release --git-token ${{ secrets.AUTONOMI_PAT }} | \
  #           awk '{ if (!/^\s*in release with input/ && !/^\s{4}/) print }'
  #
  #     - name: post notification to slack on failure
  #       if: ${{ failure() }}
  #       uses: bryannice/gitactions-slack-notification@2.0.0
  #       env:
  #         SLACK_INCOMING_WEBHOOK: ${{ secrets.SLACK_GH_ACTIONS_WEBHOOK_URL }}
  #         SLACK_MESSAGE: "Please check the logs for the run at ${{ env.WORKFLOW_URL }}/${{ github.run_id }}"
  #         SLACK_TITLE: "Release Failed"
